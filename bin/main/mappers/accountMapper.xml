<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.TmT.dao.AccountDao">

	<!-- 자유 계좌 조회 -->
<select id="findFreeAccounts" parameterType="Long" resultType="FreeAccountResponse">
    SELECT
        a.account_id,
        a.account_name,
        a.bank_name,
        a.balance AS balance,
        (a.balance - COALESCE(
            (SELECT t.balance_after
             FROM Transaction t
             WHERE t.account_id = a.account_id
               AND t.transaction_datetime &lt; CURDATE()  -- 어제 이전의 가장 최근 거래 내역
             ORDER BY t.transaction_datetime DESC
             LIMIT 1), 0)) AS balanceDifference  -- 어제와의 금액 차이
    FROM
        Account a
    WHERE
        a.member_id = #{memberId}
        AND a.account_type = 'free'
</select>


	
		<!-- 적금 계좌 조회 -->
	<select id="findSavingsAccounts" parameterType="Long"
		resultType="SavingsAccountResponse">
		SELECT
		account_id,
		account_name,
		bank_name,
		balance
		FROM
		Account
		WHERE
		member_id =
		#{memberId}
		AND
		account_type = 'savings'
	</select>	
	
	    <!-- Account 잔액 합계 조회 -->
    <select id="getTotalBalance" parameterType="Long" resultType="BalanceResponse">
        SELECT COALESCE(SUM(balance), 0) AS total FROM Account WHERE member_id = #{memberId}
    </select>
	
	
		<!-- 적금 계좌 조회 -->
	<select id="findSavingsAccountByAccountId"
		resultType="SavingsAccountDetailDTO">
		SELECT
		account_id,
		account_number,
		account_name,
		bank_name,
		balance,
		maturity_date,
		interest_rate
		FROM
		Account
		WHERE
		account_id = #{accountId}
		AND
		account_type = "savings"
	</select>
	
<select id="findFreeAccountByAccountId" parameterType="Long" resultType="FreeAccountDetailDTO">
    SELECT
        account_id,
        account_number,
        account_name,
        bank_name,
        balance
    FROM
        Account
    WHERE
        account_id = #{accountId}
        AND account_type = 'free'
</select>

<select id="findBalance" parameterType="Long" resultType="Long">
    SELECT
        balance
    FROM
        Account
    WHERE
        account_id = #{accountId}
</select>

    <!-- 계좌 목록 삽입 -->
<insert id="insertAccounts" parameterType="list" useGeneratedKeys="true" keyProperty="accountId">
    INSERT INTO Account (account_type, account_number, account_name, bank_name, member_id, balance, maturity_date, interest_rate)
    VALUES
    <foreach collection="list" item="account" separator=",">
        (
            #{account.accountType}, 
            #{account.accountNumber}, 
            #{account.accountName}, 
            #{account.bankName}, 
            #{account.memberId}, 
            #{account.balance},
            <choose>
                <when test="account.maturityDate != null">#{account.maturityDate}</when>
                <otherwise>NULL</otherwise>
            </choose>,
            <choose>
                <when test="account.interestRate != null">#{account.interestRate}</when>
                <otherwise>NULL</otherwise>
            </choose>
        )
    </foreach>
</insert>

    <!-- 계좌 잔액 업데이트 -->
    <update id="updateBalance">
        UPDATE Account
        SET balance = #{balance}
        WHERE account_id = #{accountId}
    </update>


</mapper>